# ----------------------------------------
# THIS ARE THE SCRATCH CODE AND TEST CODES
# ----------------------------------------


#URL and links removal
testvalue = re.sub(r'http\S+', '', df_reviews["Product_Review"])
testvalue = re.sub(r"x000D",'',testvalue)




def preprocess_cleaning(textcomment):
    #URL and links removal
    testvalue = re.sub(r'http\S+', '', df["Product_Review"][2])
    testvalue = re.sub(r"x000D",'',testvalue)

    #html tag removal
    tag_rem = re.compile(r'<[^>]+>')
    testvalue = tag_rem.sub('', testvalue)

    #punctuation and character removal
    testvalue = re.sub('[^a-zA-Z0  -9]',' ', testvalue)

    #Single Character Removal
    testvalue = re.sub(r"\s+[a-zA-Z]\s+", ' ', testvalue)

    #Multiple Spaces Removal
    testvalue = re.sub(r'\s+', ' ', testvalue)

    #Stopword Removal
    stopword_pattern = re.compile(r'\b(' + r'|'.join(stopwords.words('english')) + r')\b\s*')
    testvalue = stopword_pattern.sub('', testvalue)
    print (testvalue)
    return testvalue







#vectorize = TfidfVectorizer(use_idf=True, lowercase=True, strip_accents='ascii', stop_words=stopwords.words('english'))

vectorize = CountVectorizer()
x_val = vectorize.fit_transform(df_reviews['Reviews'])
vectorize.get_feature_names_out()
x_val
y_val = df_reviews['Rating']
x_train, x_test, y_train, y_test = train_test_split(x_val, y_val, test_size=0.2, random_state=0)
x_train_count = vectorize.fit_transform(x_train)
classifier = naive_bayes.MultinomialNB()
classifier.fit(x_train, y_train)



#Partial Code for naive Bayes

df = pd.DataFrame({'sentences': ['This is a very good site. I will recommend it to others.', 'Can you please give me a call at 9983938428. have issues with the listings.', 'good work! keep it up']})
df['tokenized_sents'] = df.apply(lambda row: nltk.word_tokenize(row['sentences']), axis=1)

#Vectorize process
vectorize = TfidfVectorizer(use_idf=True, lowercase=True, strip_accents='ascii')
#vectorize = CountVectorizer()

#----------------------------------------------------------
#This portion is part of Naive Bayes, Multinomial Algorithm
#----------------------------------------------------------
y_val = df_reviews['Rating']
x_val = df_reviews['Reviews']
x_train, x_test, y_train, y_test = train_test_split(x_val, y_val, test_size=0.2, random_state=0)
x_train_count = vectorize.fit_transform(x_train.values)
x_train_count.toarray()

#dfxls = x_train_count.toarray()[:2]
#dfxls = pd.DataFrame(x_train_count.toarray())
#dfxls.to_excel("x_train.xlsx")

classifier = naive_bayes.MultinomialNB()
classifier.fit(x_train_count, y_train)
#roc_auc_score(y_test, classifier.predict_proba(x_test)[:,1],multi_class='ovo')

gadget_review_array = np.array(["Capacity are good"])
gadget_review_vector = vectorize.transform(gadget_review_array)
classifier.predict(gadget_review_vector)




#googletrans==4.0.0-rc1
from googletrans import Translator
trans_interpreter = Translator()

df_test=pd.DataFrame({
    'id':[1,2,3,4,5],
    'name':['Kamusta','Pagkain ng mahirap','ang pangalan ko ay jherold','Ryan','Mary'],
    'age':[20,25,15,10,30],
    'income':[4000,7000,200,0,10000]
})

df_test['name'] = df_test.apply(lambda x: trans_interpreter.translate(x['name'],src="auto",dest="en").text, axis=1)

#df_test['income']=df_test.apply(lambda x: x['income']+3,axis=1)
df_test
